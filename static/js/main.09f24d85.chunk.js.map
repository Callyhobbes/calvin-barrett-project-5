{"version":3,"sources":["assets/chef-video.mp4","Recipes.js","textTransform.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","this","props","recipeName","calories","image","carbs","protein","fat","url","amount","className","toFixed","src","alt","href","target","Component","textTransform","text","document","querySelector","splitText","textContent","split","i","length","innerHTML","char","timer","setInterval","querySelectorAll","classList","add","complete","clearInterval","App","handleInputChange","e","setState","userInput","value","handleSubmit","preventDefault","showResults","axios","method","responseType","params","q","state","app_id","app_key","then","food","console","log","data","recipes","hits","smoothScroll","getElementById","duration","targetPosition","getBoundingClientRect","top","startPosition","window","pageYOffset","distance","startTime","requestAnimationFrame","animation","currentTime","t","b","c","timeElapsed","run","scrollTo","returnTop","id","video","autoPlay","loop","action","onSubmit","htmlFor","type","placeholder","onChange","map","meal","index","Recipes","recipe","label","totalNutrients","CHOCDF","quantity","PROCNT","FAT","yield","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.09f24d85.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/chef-video.0df42e0c.mp4\";","import { Component } from 'react';\r\n\r\nclass Recipe extends Component {\r\n\r\n  render() { \r\n\r\n    const { recipeName, calories, image, carbs, protein, fat, url, amount } = this.props;\r\n    return (\r\n      <li className=\"recipe\">\r\n        <h2>{recipeName}</h2>\r\n        <div className=\"core-content\">\r\n          <div className=\"info\">\r\n            <p>Calories: {calories.toFixed(0)}</p>\r\n            <p>Carbs: {carbs.toFixed(0)}g</p>\r\n            <p>Protein: {protein.toFixed(0)}g</p>\r\n            <p>Fat: {fat.toFixed(0)}g</p>\r\n            <p>Serves: {amount} {amount > 1 ? \"people\" : \"person\"}</p>\r\n          </div>\r\n          <img src={image} alt={recipeName} />\r\n        </div>\r\n        <div className=\"re-direct\">\r\n          <a href={url} target=\"_blank\">Instructions</a>\r\n        </div>\r\n      </li>\r\n    )\r\n  }\r\n}\r\nexport default Recipe;","\r\n\r\nfunction textTransform() {\r\n  \r\n  const text = document.querySelector(\"h1\");\r\n  const strText = text.textContent;\r\n  const splitText = strText.split(\"\");\r\n  text.textContent = \"\";\r\n\r\n  for (let i = 0; i < splitText.length; i++) {\r\n    text.innerHTML += \"<span>\" + splitText[i] + \"</span>\";\r\n  }\r\n\r\n  let char = 0;\r\n\r\n  let timer = setInterval(function () {\r\n    const span = text.querySelectorAll(\"span\")[char];\r\n    span.classList.add(\"fade\");\r\n    char++;\r\n    if (char === splitText.length) {\r\n      complete();\r\n      return;\r\n    }\r\n  }, 150);\r\n\r\n  const complete = () => {\r\n    clearInterval(timer);\r\n    timer = null;\r\n  }\r\n}\r\n\r\nexport default textTransform;\r\n\r\n\r\n","import { Component, Fragment } from 'react';\nimport video from './assets/chef-video.mp4';\nimport Recipes from './Recipes.js';\nimport axios from 'axios';\nimport textTransform from './textTransform.js';\n\n\n\nclass App extends Component {\n\n  // initialize state within our constructor lifecycle method to keep track of the data which is changing within our application AKA the recipe response waiting on from our edamame API call\n  constructor() {\n    super();\n    this.state = {\n      recipes: [],\n      userInput: ''\n    }\n  }\n  \n  componentDidMount() {\n    textTransform();\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      userInput: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    // prevent browser refresh\n    e.preventDefault();\n\n    // add results section after the search query\n    this.showResults();\n\n    // create variables for the API ID and API Key\n    const appID = \"f7c1ac0b\";\n    const appApiKey = \"d9ba5cbc7d8628b0f4167221ac2027fa\";\n\n    // use axios to make API call but after the userInput has been updated\n    axios({\n      url: 'https://api.edamam.com/search',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        q: `${this.state.userInput}`,\n        app_id: `${appID}`,\n        app_key: `${appApiKey}`\n      }\n    }).then((food) => {\n      // set the this.state to the queried items\n      console.log(food.data);\n      \n      this.setState({\n        recipes: food.data.hits\n      })\n      // smooth scroll to the results section\n      this.smoothScroll('.results', 1500);\n    })\n\n  }\n\n  // function to get the results section to appear only after the query is submitted\n  showResults = () => {\n    document.getElementById(\"results\").classList.add(\"show\");\n    document.querySelector(\"footer\").classList.add(\"show\");\n  }\n\n  // function to scroll with an ease-in-out to submissions and clicks\n  smoothScroll = (target, duration) => {\n    // arguements set to make the function reuseable\n    let location = document.querySelector(target);\n    let targetPosition = location.getBoundingClientRect().top;\n    let startPosition = window.pageYOffset;\n    let distance = targetPosition - startPosition;\n    let startTime = null;\n\n    // set timer for the scroll\n    function animation(currentTime) {\n      if (startTime === null) startTime = currentTime;\n      let timeElapsed = currentTime - startTime;\n      let run = easeInOutQuad(timeElapsed, startPosition, distance, duration);\n      window.scrollTo(0, run);\n      if (timeElapsed < duration) requestAnimationFrame(animation);\n    }\n\n    // heavy math to get the quadrating ease (accelerate to 50%, then decelerate)\n    function easeInOutQuad(t, b, c, d) {\n      t /= d / 2;\n      if (t < 1) return c / 2 * t * t + b;\n      t--;\n      return -c / 2 * (t * (t - 2) - 1) + b;\n    }\n    requestAnimationFrame(animation);\n  }\n\n  returnTop = () => {\n    this.smoothScroll(\"#start\", 2000);\n  }\n\n\n  render() {\n    return (\n      <Fragment>\n        <header id=\"start\">\n          <div className=\"banner\">\n            <video src={video} autoPlay=\"true\" loop=\"true\"></video>\n            <div className=\"search\">\n              <h1>Anyone Can Cook</h1>\n              <form action=\"\" className=\"search-box\" onSubmit={this.handleSubmit}>\n                <label htmlFor=\"search\" className=\"sr-only\">Search Food</label>\n                <input id=\"search\" className=\"search-text\" type=\"text\" placeholder=\"Search a recipe\" onChange={this.handleInputChange} value={this.state.userInput}/>\n                <button className=\"search-button\" value=\"submit\"><i className=\"fas fa-carrot\"></i></button>\n              </form>\n            </div>\n            <div className=\"overlay\"></div>\n          </div>\n        </header>\n\n        <section className=\"results\" id=\"results\">\n          <div className=\"wrapper\">\n            <ul className=\"recipe-list\">\n            {\n              this.state.recipes.map((meal, index) => {\n                return(\n                  <Recipes\n                    key={index}\n                    recipeName={meal.recipe.label}\n                    calories={meal.recipe.calories}\n                    image={meal.recipe.image}\n                    carbs={meal.recipe.totalNutrients.CHOCDF.quantity}\n                    protein={meal.recipe.totalNutrients.PROCNT.quantity}\n                    fat={meal.recipe.totalNutrients.FAT.quantity}\n                    url={meal.recipe.url}\n                    amount={meal.recipe.yield}\n                  />\n                )\n              })\n            }\n            </ul>\n            <div className=\"to-top\">\n              <a href=\"#start\" className=\"link-to-top\" onClick={this.returnTop}>Another Recipe</a>\n            </div>\n          </div>\n        </section>\n\n        <footer>\n          <div className=\"background\">\n            <p>Deliciously Cooked by <a href=\"https://github.com/Callyhobbes\" target=\"_blank\">Cally</a> at <a href=\"https://junocollege.com/\" target=\"_blank\">Juno College</a> <i className=\"fab fa-canadian-maple-leaf\"></i></p>\n          </div>\n        </footer>\n      </Fragment>\n\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}